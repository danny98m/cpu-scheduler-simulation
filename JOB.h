#ifndef myJOB#define myJOB//----------------------------------------------------------------------//  SPECIFICATION FILE (JOB.h)//  This module declares a new type for ONE JOB//  Includes constructors, methods, and variables//----------------------------------------------------------------------//===Preprocessors======================================================#include "constants.h"#include <iostream>#include "RandGenQSim.h"#include <vector>using namespace std;//======================================================================class JOB{  public:                                                //---Constructors----------------------------------    JOB();                                      // Default CTOR    JOB(short useThisId);                       // CTOR when ID is known; ID# is passed in                                                //--EndConstructors--------------------------------                                                //---setterMethods---------------------------------    void set_ID ();                             // Randomly generates ID    void set_name();                            // Randomly selects between 4 job types    void set_totalTimeSecs();                   // Randomly sets total job time based on job                                                //---endSetterMethods------------------------------                                                //---getterMethods---------------------------------    long get_ID();                              // Returns user ID	string get_name();                          // Returns name of cpu job	double get_totalTimeSecs();                 // Returns the total time of job    double get_remainingTimeSecs();             // Returns remaining job time                                                //---endGetterMethods------------------------------    void print();                               // Returns id, job name, total time, and time remaining    void subtract_timeSlice(double timeSlice);  // Subtracts time slice from time remaining  private:    long id;                                    // id of user    string name;                                // TYPE of process (is this the job name)    double            totalTimeSecs,                      // total time for job to be completed in second            timeRemainingSecs;                  // time left for the job to finish};  // end class JOB#endif//-------------------------------------------------EOF------------------------------------------